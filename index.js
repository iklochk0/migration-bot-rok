const { 
    Client, 
    GatewayIntentBits, 
    Partials, 
    Events, 
    EmbedBuilder, 
    AttachmentBuilder, 
    ButtonBuilder,
    ActionRowBuilder,
    ButtonStyle 
} = require('discord.js');

require('dotenv').config();

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const TOKEN = process.env.TOKEN; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const ADMIN_CHANNEL_ID = process.env.ADMIN_CHANNEL_ID;   // ID –∞–¥–º—ñ–Ω-–∫–∞–Ω–∞–ª—É –¥–ª—è –≥–æ—Ç–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ Discord –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,           // –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥–∞–º–∏
        GatewayIntentBits.GuildMessages,    // –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        GatewayIntentBits.MessageContent,   // –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑–º—ñ—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        GatewayIntentBits.DirectMessages    // –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DM
    ],
    partials: [ Partials.Channel ]
});

// –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –º—ñ—Ç–∫–æ—é —á–∞—Å—É
function logEvent(code, description) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] [${code}] ${description}`);
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const activeSessions = new Set();

// –¢–µ–∫—Å—Ç–∏ –¥–ª—è –¥–≤–æ—Ö –º–æ–≤: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (ua) —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ (en)
const localeTexts = {
    ua: {
        startDm: "–ü—Ä–∏–≤—ñ—Ç! –î–ª—è –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—é –¥–æ –Ω–∞—à–æ–≥–æ –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å. –ü—Ä–æ—à—É –ù–ï –æ–±—Ä—ñ–∑–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏.\n‚ö†Ô∏è",
        askProfile: "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.",
        askEquipment: "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.",
        askCommanders: "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤.",
        askVIP: "4Ô∏è‚É£ –Ø–∫–∏–π —É –≤–∞—Å VIP-—Ä—ñ–≤–µ–Ω—å? –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω—à–æ—Ç VIP.",
        askAge: "5Ô∏è‚É£ –Ø–∫–∏–π –≤—ñ–∫ –≤–∞—à–æ–≥–æ –∞–∫–∫–∞–Ω—Ç—É?",
        lastKVK: "6Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–æ–≥–æ –º–∏–Ω—É–ª–æ–≥–æ –ö–í–ö.",
        invalidImage: "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å **–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è** (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –¥–ª—è —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.",
        invalidText: "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ–∫—Å—Ç–æ–º (—Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è).",
        timeoutMsg: "‚ö†Ô∏è –ß–∞—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply –∑–∞–Ω–æ–≤–æ.",
        sessionActive: "–í–∏ –≤–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É –∞–±–æ –∑–∞—á–µ–∫–∞–π—Ç–µ 5 —Ö–≤–∏–ª–∏–Ω, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É.",
        dmError: "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞–º –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, —É –≤–∞—Å –≤–∏–º–∫–Ω–µ–Ω—ñ DM –∑ —Ü—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä—É.",
        thankYou: "‚úÖ –î—è–∫—É—î–º–æ, –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ! –á—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!"
    },
    en: {
        startDm: "Hello! To apply for migration, please answer a few questions. Please DON'T crop the screenshots. ‚ö†Ô∏è \n",
        askProfile: "1Ô∏è‚É£ Please send a screenshot of your game profile.",
        askAge: "5Ô∏è‚É£ How old is your account?",
        askEquipment: "2Ô∏è‚É£ Please send a screenshot of your equipment.",
        askCommanders: "3Ô∏è‚É£ Please send a screenshot of your commanders.",
        askVIP: "4Ô∏è‚É£ What is your VIP level? Please send a screenshot of your VIP screen.",
        lastKVK: "6Ô∏è‚É£ Please send a screenshot of your last KvK statistics.",
        invalidImage: "‚ùó Please send an **image** (screenshot) for this question.",
        invalidText: "‚ùó Please answer with text (no image is needed for this question).",
        timeoutMsg: "‚ö†Ô∏è Time is up. Session ended due to inactivity. Please run /apply again if you want to try again.",
        sessionActive: "You already have an application in progress. Please finish it or wait 5 minutes before starting a new one.",
        dmError: "I couldn't send you a DM. Please check your privacy settings and try again.",
        thankYou: "‚úÖ Thank you, your application has been received and sent to the Admins!"
    }
};

// –ì–æ–ª–æ–≤–Ω–∞ –ø–æ–¥—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
client.once(Events.ClientReady, async () => {
    console.log(`Bot logged in as ${client.user.tag}`);
    // –û—á–∏—â—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    await client.application.commands.set([]);

    const guildId = '1354546683643428864'; 
    const guild = client.guilds.cache.get(guildId);
    if (!guild) {
        console.error(`–°–µ—Ä–≤–µ—Ä —ñ–∑ ID ${guildId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
        return;
    }

    try {
        await guild.commands.create({
            name: 'apply',
            description: 'Start an Migration Application.'
        });
        console.log('‚úÖ Slash-–∫–æ–º–∞–Ω–¥–∞ /apply —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–∏:', error);
    }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ–π
client.on(Events.InteractionCreate, async interaction => {
    // –Ø–∫—â–æ —Ü–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 'apply_start', –∑–∞–ø—É—Å–∫–∞—î–º–æ DM-–ª–æ–≥—ñ–∫—É
    if (interaction.isButton() && interaction.customId === 'apply_start') {
        await handleMigrationDM(interaction);
        return;
    }

    // –û–±—Ä–æ–±–∫–∞ slash-–∫–æ–º–∞–Ω–¥–∏ /apply (–ø–µ—Ä—à–∏–π –≤–∏–∫–ª–∏–∫) ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Embed —ñ–∑ –∫–Ω–æ–ø–∫–æ—é
    if (interaction.isChatInputCommand() && interaction.commandName === 'apply') {
        const allowedChannelId = '1354829265849286847';
    
        if (interaction.channelId !== allowedChannelId) {
            await interaction.reply({
                content: `‚ùå This command can only be used in <#${allowedChannelId}> channel.`,
                ephemeral: true
            });
            return;
        }
    
        // –î–∞–ª—ñ —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –µ–º–±–µ–¥–∞ —ñ –∫–Ω–æ–ø–∫–∏
        const embed = new EmbedBuilder()
            .setTitle('üìã Migration Requirements')
            .setDescription(
                '‚Ä¢ 1b+ KP, 2m+ deaths\n' +
                '‚Ä¢ 2 full marches\n' +
                '‚Ä¢ VIP 14+\n\n' +
                '‚ùó False or incomplete info = auto reject.\n'
            )
            .setColor(0x2ECC71);
    
        const button = new ButtonBuilder()
            .setCustomId('apply_start')
            .setLabel('üì• Apply')
            .setStyle(ButtonStyle.Primary);
    
        const row = new ActionRowBuilder().addComponents(button);
    
        await interaction.reply({
            content: 'Click the button to start applying:',
            embeds: [embed],
            components: [row],
            ephemeral: true
        });
        return;
    }
});

// –§—É–Ω–∫—Ü—ñ—è DM-–ª–æ–≥—ñ–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ (–∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏)
async function handleMigrationDM(interaction) {
    const userId = interaction.user.id;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó
    if (activeSessions.has(userId)) {
        await interaction.reply({ content: localeTexts.en.sessionActive, ephemeral: true });
        return;
    }
    activeSessions.add(userId);
    logEvent("200", `Started application session for user ${userId}`);

    try {
        const dmChannel = await interaction.user.createDM();

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏ (—è–∫—â–æ –ª–æ–∫–∞–ª—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "uk", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É)
        let lang = 'en';
        const locale = interaction.locale || '';
        if (locale.startsWith('uk')) {
            lang = 'ua';
        }

        await interaction.reply({ 
            content: (lang === 'ua' ? "‚úÖ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞–º –≤ –ø—Ä–∏–≤–∞—Ç." : "‚úÖ Starting your application! I've sent you a DM."), 
            ephemeral: true 
        });

        const introMsg = await dmChannel.send(localeTexts[lang].startDm);
        setTimeout(() => { introMsg.delete().catch(() => {}); }, 300000);

        // –•–µ–ª–ø–µ—Ä –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ —Ç–∞–π–º–∞—É—Ç–æ–º —ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é (–∑ –ª—ñ–º—ñ—Ç–æ–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å)
        async function askQuestion(questionText, expectImage, maxCount = 1) {
            const questionMsg = await dmChannel.send(`${questionText}\n(You can attach up to ${maxCount} image(s) in **one** message.)`);
            setTimeout(() => { questionMsg.delete().catch(() => {}); }, 300000);

            const collected = await dmChannel.awaitMessages({
                filter: m => m.author.id === userId,
                max: 1,
                time: 300000
            });
            if (!collected.size) {
                return null;
            }
            const answerMsg = collected.first();

            if (expectImage) {
                if (answerMsg.attachments.size === 0) {
                    const warnMsg = await dmChannel.send(localeTexts[lang].invalidImage);
                    setTimeout(() => { warnMsg.delete().catch(() => {}); }, 300000);
                    try { await answerMsg.delete(); } catch (e) {}
                    return await askQuestion(questionText, expectImage, maxCount);
                } else {
                    const attachmentsArray = [...answerMsg.attachments.values()];
                    const allImages = attachmentsArray.every(att => att.contentType && att.contentType.startsWith('image'));
                    if (!allImages) {
                        const warnMsg = await dmChannel.send(localeTexts[lang].invalidImage);
                        setTimeout(() => { warnMsg.delete().catch(() => {}); }, 300000);
                        try { await answerMsg.delete(); } catch (e) {}
                        return await askQuestion(questionText, expectImage, maxCount);
                    }
                    if (attachmentsArray.length > maxCount) {
                        const warnMsg = await dmChannel.send(`‚ùó You attached **${attachmentsArray.length}** images, but the limit is **${maxCount}**. Please resend in **one** message with up to **${maxCount}** images.`);
                        setTimeout(() => { warnMsg.delete().catch(() => {}); }, 300000);
                        try { await answerMsg.delete(); } catch (e) {}
                        return await askQuestion(questionText, expectImage, maxCount);
                    }
                    return attachmentsArray; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ –≤–∫–ª–∞–¥–µ–Ω—å
                }
            } else {
                if (answerMsg.attachments.size > 0) {
                    const warnMsg = await dmChannel.send(localeTexts[lang].invalidText);
                    setTimeout(() => { warnMsg.delete().catch(() => {}); }, 300000);
                    try { await answerMsg.delete(); } catch (e) {}
                    return await askQuestion(questionText, expectImage, maxCount);
                } else {
                    return answerMsg;
                }
            }
        }

        // –õ—ñ–º—ñ—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–æ—Ç–æ –Ω–∞ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
        const limits = {
            profile: 2,
            equipment: 10,
            commanders: 2,
            vip: 2,
            lastKVK: 2
        };

        const answers = {};

        // –ó–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        let response = await askQuestion(localeTexts[lang].askProfile, true, limits.profile);
        if (!response) { throw { code: 101, message: "User did not respond to profile screenshot." }; }
        answers.profileScreenshot = response;

        response = await askQuestion(localeTexts[lang].askEquipment, true, limits.equipment);
        if (!response) { throw { code: 101, message: "User did not respond to equipment screenshot." }; }
        answers.equipmentScreenshot = response;

        response = await askQuestion(localeTexts[lang].askCommanders, true, limits.commanders);
        if (!response) { throw { code: 101, message: "User did not respond to commanders screenshot." }; }
        answers.commanderScreenshot = response;

        response = await askQuestion(localeTexts[lang].askVIP, true, limits.vip);
        if (!response) { throw { code: 101, message: "User did not respond to VIP screenshot." }; }
        answers.vipScreenshot = response;

        response = await askQuestion(localeTexts[lang].askAge, false);
        if (!response) { throw { code: 101, message: "User did not respond to account age." }; }
        answers.age = response.content.trim();

        response = await askQuestion(localeTexts[lang].lastKVK, true, limits.lastKVK);
        if (!response) { throw { code: 101, message: "User did not respond to last KvK screenshot." }; }
        answers.lastKVKresluts = response;

        logEvent("201", `Collected all answers from user ${userId}. Preparing embed...`);

        // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–Ω–∏–π Embed –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–∞ –∑–≤–µ–¥–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è)
        const resultEmbed = new EmbedBuilder()
            .setTitle("üì® –ù–æ–≤–∞ –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∞ –∑–∞—è–≤–∞")
            .setColor(0x2ECC71)
            .addFields(
                { name: "–í—ñ–∫ –∞–∫–∫–∞—É–Ω—Ç—É", value: answers.age || "N/A", inline: true },
                { name: "User", value: `${interaction.user.tag} (${interaction.user.id})`, inline: false }
            );

        const adminChannel = await client.channels.fetch(ADMIN_CHANNEL_ID);
        await adminChannel.send({ embeds: [resultEmbed] });

        // –•–µ–ª–ø–µ—Ä–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤ —à–º–∞—Ç–∫–∞–º–∏ –ø–æ 10 (–ª—ñ–º—ñ—Ç Discord)
        function toBuilders(arr) {
            return arr.map((att, i) => new AttachmentBuilder(att.url, { name: att.name || `screenshot_${i + 1}.png` }));
        }
        function chunkArray(arr, size) {
            const out = []; for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size)); return out;
        }
        async function sendSection(title, attachmentsArray) {
            if (!attachmentsArray || attachmentsArray.length === 0) return;
            const chunks = chunkArray(toBuilders(attachmentsArray), 10);
            for (let idx = 0; idx < chunks.length; idx++) {
                const header = chunks.length > 1 ? `${title} (part ${idx + 1}/${chunks.length})` : title;
                await adminChannel.send({ content: `**${header}**`, files: chunks[idx] });
            }
        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ä–æ–∑–¥—ñ–ª –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏, –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–æ 10 —Ñ–æ—Ç–æ –¥–ª—è —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è
        await sendSection("üìé –ü—Ä–æ—Ñ—ñ–ª—å", answers.profileScreenshot);
        await sendSection("üìé –ö–æ–º–∞–Ω–¥–∏—Ä–∏", answers.commanderScreenshot);
        await sendSection("üìé –°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è", answers.equipmentScreenshot);
        await sendSection("üìé VIP", answers.vipScreenshot);
        await sendSection("üìé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–Ω. KvK", answers.lastKVKresluts);

        logEvent("202", `Sent application (embed + files) to admin channel for user ${userId}.`);

        const thanksMsg = await dmChannel.send(localeTexts[lang].thankYou);
        setTimeout(() => { thanksMsg.delete().catch(() => {}); }, 300000);
    }
    catch (err) {
        if (err && err.code === 101) {
            logEvent("101", `Session timed out for user ${userId} - ${err.message || 'No response'}`);
            try {
                const timeoutNotice = await interaction.user.send(localeTexts.en.timeoutMsg);
                setTimeout(() => { timeoutNotice.delete().catch(() => {}); }, 300000);
            } catch {}
        } else if (err && err.code === 102) {
            logEvent("102", `Failed to send embed to admin channel for user ${userId} - ${err.message || err}`);
            try {
                await interaction.user.send(localeTexts.en.dmError);
            } catch {}
        } else if (err && err.message === "Cannot send messages to this user") {
            logEvent("100", `Cannot DM user ${userId}. Possibly has DMs closed.`);
            await interaction.reply({ content: localeTexts.en.dmError, ephemeral: true });
        } else {
            console.error("Unexpected error in application flow:", err);
            logEvent("ERROR", `Unexpected error for user ${userId}: ${err.message || err}`);
            try {
                await interaction.user.send("‚ùå An unexpected error occurred. Please contact an administrator.");
            } catch {}
        }
    }
    finally {
        activeSessions.delete(userId);
    }
}

client.login(TOKEN);
